/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/__root'
import { Route as UsersRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/users'
import { Route as ApplicationsRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/applications'
import { Route as ApplicationsIndexRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/applications/index'
import { Route as ApplicationsAppIdRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/applications/$appId'
import { Route as ApplicationsAppIdIndexRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/applications/$appId/index'
import { Route as ApplicationsAppIdScansWebAuditRouteImport } from '/Users/pilmee/Documents/GitHub/MonitoringTool/src/routes/applications/$appId/scans/web-audit'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsRoute = ApplicationsRouteImport.update({
  id: '/applications',
  path: '/applications',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsIndexRoute = ApplicationsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ApplicationsRoute,
} as any)
const ApplicationsAppIdRoute = ApplicationsAppIdRouteImport.update({
  id: '/$appId',
  path: '/$appId',
  getParentRoute: () => ApplicationsRoute,
} as any)
const ApplicationsAppIdIndexRoute = ApplicationsAppIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ApplicationsAppIdRoute,
} as any)
const ApplicationsAppIdScansWebAuditRoute =
  ApplicationsAppIdScansWebAuditRouteImport.update({
    id: '/scans/web-audit',
    path: '/scans/web-audit',
    getParentRoute: () => ApplicationsAppIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/applications': typeof ApplicationsRouteWithChildren
  '/users': typeof UsersRoute
  '/applications/$appId': typeof ApplicationsAppIdRouteWithChildren
  '/applications/': typeof ApplicationsIndexRoute
  '/applications/$appId/': typeof ApplicationsAppIdIndexRoute
  '/applications/$appId/scans/web-audit': typeof ApplicationsAppIdScansWebAuditRoute
}
export interface FileRoutesByTo {
  '/users': typeof UsersRoute
  '/applications': typeof ApplicationsIndexRoute
  '/applications/$appId': typeof ApplicationsAppIdIndexRoute
  '/applications/$appId/scans/web-audit': typeof ApplicationsAppIdScansWebAuditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/applications': typeof ApplicationsRouteWithChildren
  '/users': typeof UsersRoute
  '/applications/$appId': typeof ApplicationsAppIdRouteWithChildren
  '/applications/': typeof ApplicationsIndexRoute
  '/applications/$appId/': typeof ApplicationsAppIdIndexRoute
  '/applications/$appId/scans/web-audit': typeof ApplicationsAppIdScansWebAuditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/applications'
    | '/users'
    | '/applications/$appId'
    | '/applications/'
    | '/applications/$appId/'
    | '/applications/$appId/scans/web-audit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/users'
    | '/applications'
    | '/applications/$appId'
    | '/applications/$appId/scans/web-audit'
  id:
    | '__root__'
    | '/applications'
    | '/users'
    | '/applications/$appId'
    | '/applications/'
    | '/applications/$appId/'
    | '/applications/$appId/scans/web-audit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ApplicationsRoute: typeof ApplicationsRouteWithChildren
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications': {
      id: '/applications'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof ApplicationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/': {
      id: '/applications/'
      path: '/'
      fullPath: '/applications/'
      preLoaderRoute: typeof ApplicationsIndexRouteImport
      parentRoute: typeof ApplicationsRoute
    }
    '/applications/$appId': {
      id: '/applications/$appId'
      path: '/$appId'
      fullPath: '/applications/$appId'
      preLoaderRoute: typeof ApplicationsAppIdRouteImport
      parentRoute: typeof ApplicationsRoute
    }
    '/applications/$appId/': {
      id: '/applications/$appId/'
      path: '/'
      fullPath: '/applications/$appId/'
      preLoaderRoute: typeof ApplicationsAppIdIndexRouteImport
      parentRoute: typeof ApplicationsAppIdRoute
    }
    '/applications/$appId/scans/web-audit': {
      id: '/applications/$appId/scans/web-audit'
      path: '/scans/web-audit'
      fullPath: '/applications/$appId/scans/web-audit'
      preLoaderRoute: typeof ApplicationsAppIdScansWebAuditRouteImport
      parentRoute: typeof ApplicationsAppIdRoute
    }
  }
}

interface ApplicationsAppIdRouteChildren {
  ApplicationsAppIdIndexRoute: typeof ApplicationsAppIdIndexRoute
  ApplicationsAppIdScansWebAuditRoute: typeof ApplicationsAppIdScansWebAuditRoute
}

const ApplicationsAppIdRouteChildren: ApplicationsAppIdRouteChildren = {
  ApplicationsAppIdIndexRoute: ApplicationsAppIdIndexRoute,
  ApplicationsAppIdScansWebAuditRoute: ApplicationsAppIdScansWebAuditRoute,
}

const ApplicationsAppIdRouteWithChildren =
  ApplicationsAppIdRoute._addFileChildren(ApplicationsAppIdRouteChildren)

interface ApplicationsRouteChildren {
  ApplicationsAppIdRoute: typeof ApplicationsAppIdRouteWithChildren
  ApplicationsIndexRoute: typeof ApplicationsIndexRoute
}

const ApplicationsRouteChildren: ApplicationsRouteChildren = {
  ApplicationsAppIdRoute: ApplicationsAppIdRouteWithChildren,
  ApplicationsIndexRoute: ApplicationsIndexRoute,
}

const ApplicationsRouteWithChildren = ApplicationsRoute._addFileChildren(
  ApplicationsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ApplicationsRoute: ApplicationsRouteWithChildren,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
